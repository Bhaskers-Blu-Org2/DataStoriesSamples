REFERENCE ASSEMBLY [ExtR];

// R script to run
DEPLOY RESOURCE @"/Samples/Scripts/FraudDetection-Training.R";  

// Input data for training (with headers)
DECLARE @TransactionsInputFile string =  @"/Samples/Data/transactionsWithLabel10000.csv";
DECLARE @AccountsInputFile string = @"/Samples/Data/accountInfo.csv";

// Output files
DECLARE @OutputFile string = @"/Samples/Output/training/RxBTreeModelSummary.txt";
DECLARE @AggTable string = @"/Samples/Output/training/aggtable.csv";
DECLARE @Output_RiskTable_ipCountry string = @"/Samples/Output/training/riskTable_ipCountry.csv";
DECLARE @Output_RiskTable_ipState string = @"/Samples/Output/training/riskTable_ipState.csv";
DECLARE @Output_RiskTable_ipPostalCode string = @"/Samples/Output/training/riskTable_ipPostalCode.csv";
DECLARE @Output_RiskTable_transactionIPaddress string = @"/Samples/Output/training/riskTable_transactionIPaddress.csv";
DECLARE @Output_RiskTable_paymentBillingPostalCode string = @"/Samples/Output/training/riskTable_paymentBillingPostalCode.csv";
DECLARE @Output_RiskTable_shippingPostalCode string = @"/Samples/Output/training/riskTable_shippingPostalCode.csv";
DECLARE @Output_RiskTable_accountPostalCode string = @"/Samples/Output/training/riskTable_accountPostalCode.csv";

@Transactions = EXTRACT accountID string, transactionID string, transactionAmountUSD double, transactionCurrencyCode string, localHour int?,
                transactionScenario string, transactionType string, transactionIPaddress double, ipState string, ipPostalCode string,
                ipCountry string, isProxyIPNullable bool?, browserLanguage string, paymentInstrumentType string, cardType string,
                paymentBillingPostalCode string, paymentBillingState string, paymentBillingCountryCode string, shippingPostalCode string, shippingState string,
                shippingCountry string, cvvVerifyResult string, digitalItemCount int, physicalItemCount int, Label int, transactionDateTime string
                FROM @TransactionsInputFile
                USING Extractors.Csv(silent: true,skipFirstNRows: 1);

@Transactions = SELECT accountID, transactionID, transactionAmountUSD, transactionCurrencyCode, (int)(localHour ?? 0) AS localHour,
                transactionScenario, transactionType, transactionIPaddress, ipState, ipPostalCode,
                ipCountry, (bool) (isProxyIPNullable ?? false) AS isProxyIP, browserLanguage, paymentInstrumentType, cardType,
                paymentBillingPostalCode, paymentBillingState, paymentBillingCountryCode, shippingPostalCode, shippingState,
                shippingCountry, cvvVerifyResult, digitalItemCount, physicalItemCount, Label, transactionDateTime FROM @Transactions;

@Accounts = 
    EXTRACT accountID string, accountPostalCode string, accountState string, accountCountry string, accountAge string, 
            isUserRegistered string, paymentInstrumentAgeInAccount string
    FROM @AccountsInputFile
    USING Extractors.Csv(silent: true,skipFirstNRows: 1);

// Join Transactions with Accounts
@Trans_Account = 
    SELECT @Transactions.*, accountPostalCode, accountState, accountCountry, accountAge, isUserRegistered, paymentInstrumentAgeInAccount  
    FROM @Transactions 
    LEFT JOIN @Accounts 
    ON @Transactions.accountID == @Accounts.accountID;

// The aggregation table should be updated regularly, LatestUpdateDate would be set accordingly
DECLARE @LatestUpdateDate DateTime = DateTime.Parse("9/30/2013 23:59");

// Generate Account Level Aggregated feature
@AggTable_Day1 =
    SELECT accountID,
           SUM(transactionAmountUSD) AS sumPurchaseAmount1Day,
           COUNT(transactionID) AS sumPurchaseCount1Day
    FROM @Transactions
    WHERE (DateTime.Parse(transactionDateTime) <= @LatestUpdateDate) AND (DateTime.Parse(transactionDateTime) > @LatestUpdateDate.AddHours(-24))
    GROUP BY accountID;

@AggTable_Day30 =
    SELECT accountID,
           SUM(transactionAmountUSD) AS sumPurchaseAmount30Day,
           COUNT(transactionID) AS sumPurchaseCount30Day
    FROM @Transactions
    WHERE (DateTime.Parse(transactionDateTime) <= @LatestUpdateDate) AND (DateTime.Parse(transactionDateTime) > @LatestUpdateDate.AddDays(-30))
    GROUP BY accountID;

@AggTable_Day1_Day30 =
    SELECT DISTINCT a.accountID,
           (b.sumPurchaseAmount1Day ?? 0.0) AS sumPurchaseAmount1Day,
           ((int)(b.sumPurchaseCount1Day ?? 0)) AS sumPurchaseCount1Day
    FROM @Transactions AS a
         LEFT JOIN @AggTable_Day1 AS b
         ON a.accountID == b.accountID;

@AggTable_Day1_Day30 =
    SELECT a.*,
           (b.sumPurchaseAmount30Day ?? 0.0) AS sumPurchaseAmount30Day,
          ((int) (b.sumPurchaseCount30Day ?? 0)) AS sumPurchaseCount30Day
    FROM @AggTable_Day1_Day30 AS a
         LEFT JOIN @AggTable_Day30 AS b
         ON a.accountID == b.accountID;

OUTPUT @AggTable_Day1_Day30 TO @AggTable USING Outputters.Csv();



// Join lookup table of last 1day/30day aggregation features (account-level)
// In real scenario, this table should be updated regularly
@Trans_Account_Agg =
    SELECT @Trans_Account. *,
           sumPurchaseAmount1Day ?? 0.0 AS sumPurchaseAmount1Day,
           sumPurchaseCount1Day ?? 0 AS sumPurchaseCount1Day,
           sumPurchaseAmount30Day ?? 0.0 AS sumPurchaseAmount30Day,
           sumPurchaseCount30Day ?? 0 AS sumPurchaseCount30Day
    FROM @Trans_Account
         LEFT JOIN
             @AggTable_Day1_Day30
         ON @Trans_Account.accountID == @AggTable_Day1_Day30.accountID;


// Calculate Risk scores for specified variable
DECLARE @Smooth1 double = 10.0;
DECLARE @Smooth2 double = 100.0;
@Odds1 =
    SELECT ipCountry, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY ipCountry;
@Odds1 =
    SELECT ipCountry,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds1;
@Risktable_ipCountry =
    SELECT ipCountry,
           Math.Log(Odds / (1 - Odds)) AS ipCountry_risk
    FROM @Odds1;

OUTPUT @Risktable_ipCountry TO @Output_RiskTable_ipCountry USING Outputters.Csv();


@Odds2 =
    SELECT ipState, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY ipState;
@Odds2 =
    SELECT ipState,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds2;
@Risktable_ipState =
    SELECT ipState,
           Math.Log(Odds / (1 - Odds)) AS ipState_risk
    FROM @Odds2;

OUTPUT @Risktable_ipState TO @Output_RiskTable_ipState USING Outputters.Csv();

@Odds3 =
    SELECT ipPostalCode, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY ipPostalCode;
@Odds3 =
    SELECT ipPostalCode,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds3;
@Risktable_ipPostalCode =
    SELECT ipPostalCode,
           Math.Log(Odds / (1 - Odds)) AS ipPostalCode_risk
    FROM @Odds3;

OUTPUT @Risktable_ipPostalCode TO @Output_RiskTable_ipPostalCode USING Outputters.Csv();

@Odds4 =
    SELECT transactionIPaddress, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY transactionIPaddress;
@Odds4 =
    SELECT transactionIPaddress,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds4;
@Risktable_transactionIPaddress =
    SELECT transactionIPaddress,
           Math.Log(Odds / (1 - Odds)) AS transactionIPaddress_risk
    FROM @Odds4;

OUTPUT @Risktable_transactionIPaddress TO @Output_RiskTable_transactionIPaddress USING Outputters.Csv();

@Odds5 =
    SELECT paymentBillingPostalCode, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY paymentBillingPostalCode;
@Odds5 =
    SELECT paymentBillingPostalCode,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds5;
@Risktable_paymentBillingPostalCode =
    SELECT paymentBillingPostalCode,
           Math.Log(Odds / (1 - Odds)) AS paymentBillingPostalCode_risk
    FROM @Odds5;

OUTPUT @Risktable_paymentBillingPostalCode TO @Output_RiskTable_paymentBillingPostalCode USING Outputters.Csv();

@Odds6 =
    SELECT shippingPostalCode, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Transactions
    GROUP BY shippingPostalCode;
@Odds6 =
    SELECT shippingPostalCode,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds6;
@Risktable_shippingPostalCode =
    SELECT shippingPostalCode,
           Math.Log(Odds / (1 - Odds)) AS shippingPostalCode_risk
    FROM @Odds6;

OUTPUT @Risktable_shippingPostalCode TO @Output_RiskTable_shippingPostalCode USING Outputters.Csv();

@Odds7 =
    SELECT accountPostalCode, (SUM(Label) ?? 0) AS FraudCt, (SUM(1-Label) ?? 0) AS NonFraudCt
    FROM @Trans_Account
    GROUP BY accountPostalCode;
@Odds7 =
    SELECT accountPostalCode,
           ((FraudCt + @Smooth1) / (FraudCt + NonFraudCt + @Smooth2)) AS Odds
    FROM @Odds7;
@Risktable_accountPostalCode =
    SELECT accountPostalCode,
           Math.Log(Odds / (1 - Odds)) AS accountPostalCode_risk
    FROM @Odds7;

OUTPUT @Risktable_accountPostalCode TO @Output_RiskTable_accountPostalCode USING Outputters.Csv();

// Assign risks
@Trans_Account_Agg_Risk =
    SELECT @Trans_Account_Agg. *,
           ipCountry_risk ?? 0 AS ipCountry_risk,
           ipState_risk ?? 0 AS ipState_risk,
           ipPostalCode_risk ?? 0 AS ipPostalCode_risk,
           transactionIPaddress_risk ?? 0 AS transactionIPaddress_risk,
           paymentBillingPostalCode_risk ?? 0 AS paymentBillingPostalCode_risk,
           shippingPostalCode_risk ?? 0 AS shippingPostalCode_risk,
           accountPostalCode_risk ?? 0 AS accountPostalCode_risk
    FROM @Trans_Account_Agg
         LEFT JOIN
             @Risktable_ipCountry
         ON @Trans_Account_Agg.ipCountry == @Risktable_ipCountry.ipCountry
         LEFT JOIN
             @Risktable_ipState
         ON @Trans_Account_Agg.ipState == @Risktable_ipState.ipState
         LEFT JOIN
             @Risktable_ipPostalCode
         ON @Trans_Account_Agg.ipPostalCode == @Risktable_ipPostalCode.ipPostalCode
         LEFT JOIN
             @Risktable_transactionIPaddress
         ON @Trans_Account_Agg.transactionIPaddress == @Risktable_transactionIPaddress.transactionIPaddress
         LEFT JOIN
             @Risktable_paymentBillingPostalCode
         ON @Trans_Account_Agg.paymentBillingPostalCode == @Risktable_paymentBillingPostalCode.paymentBillingPostalCode
         LEFT JOIN
             @Risktable_shippingPostalCode
         ON @Trans_Account_Agg.shippingPostalCode == @Risktable_shippingPostalCode.shippingPostalCode
         LEFT JOIN
             @Risktable_accountPostalCode
         ON @Trans_Account_Agg.accountPostalCode == @Risktable_accountPostalCode.accountPostalCode;

// Add boolean features, drop redundant columns
@Trans_Account_Agg_Risk_Binary = SELECT accountID, transactionID, transactionAmountUSD, transactionCurrencyCode, localHour, transactionScenario, transactionType, 
                                        isProxyIP, browserLanguage, paymentInstrumentType, cardType, 
                                        paymentBillingState, paymentBillingCountryCode, shippingState, 
                                        shippingCountry, cvvVerifyResult, digitalItemCount, physicalItemCount, Label, transactionDateTime, 
                                        accountState, accountCountry, accountAge, isUserRegistered, paymentInstrumentAgeInAccount, sumPurchaseAmount1Day, 
                                        sumPurchaseCount1Day, sumPurchaseAmount30Day, sumPurchaseCount30Day, ipState_risk, ipPostalCode_risk, ipCountry_risk, 
                                        transactionIPaddress_risk, paymentBillingPostalCode_risk, shippingPostalCode_risk, accountPostalCode_risk,
                                        (transactionAmountUSD >150 ? true : false) AS is_highAmount,
                                        (paymentBillingPostalCode==accountPostalCode ? false : true) AS acct_billing_postalCode_mismatchFlag,
                                        (paymentBillingCountryCode==accountCountry ? false : true) AS acct_billing_country_mismatchFlag,
                                        (shippingPostalCode==accountPostalCode ? false : true) AS acct_shipping_postalCode_mismatchFlag,
                                        (shippingCountry==accountCountry ? false : true) AS acct_shipping_country_mismatchFlag,
                                        (shippingPostalCode==paymentBillingPostalCode ? false : true) AS shipping_billing_postalCode_mismatchFlag,
                                        (shippingCountry==paymentBillingCountryCode ? false : true) AS shipping_billing_country_mismatchFlag
                                        FROM @Trans_Account_Agg_Risk;

@ExtendedData =
    SELECT 0 AS Par,
           *
    FROM @Trans_Account_Agg_Risk_Binary;

@RScriptOutput =
    REDUCE @ExtendedData
    ON Par
    PRODUCE Par,
            RowId int,
            ROutput string
    READONLY Par
    USING new Extension.R.Reducer(scriptFile : "FraudDetection-Training.R", rReturnType : "charactermatrix");

OUTPUT @RScriptOutput TO @OutputFile USING Outputters.Tsv();
