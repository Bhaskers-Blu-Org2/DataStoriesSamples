//  Refer to R Extension Assemblies
REFERENCE ASSEMBLY [ExtR];

// R script to run
DEPLOY RESOURCE @"/Samples/Scripts/FraudDetectionScoringAdvanced.R";

// Pretrained Model Files that will be used during prediction
DEPLOY RESOURCE @"/Samples/Data/trainedmodel-rxbtree-100000-ntree100.rds";

// Reference tables
DECLARE @LookupTableInputFile string = @"/Samples/Data/lookuptable.csv";
DECLARE @risktable_ipstateInputFile string = @"/Samples/Data/risktable_ipstate.csv";
DECLARE @risktable_ipPostalCodeInputFile string = @"/Samples/Data/risktable_ipPostalCode.csv";
DECLARE @risktable_ipCountryInputFile string = @"/Samples/Data/risktable_ipCountry.csv";
DECLARE @risktable_transactionIPaddressInputFile string = @"/Samples/Data/risktable_transactionIPaddress.csv";
DECLARE @risktable_paymentBillingPostalCodeInputFile string = @"/Samples/Data/risktable_paymentBillingPostalCode.csv";
DECLARE @risktable_shippingPostalCodeInputFile string = @"/Samples/Data/risktable_shippingPostalCode.csv";
DECLARE @risktable_accountPostalCodeInputFile string = @"/Samples/Data/risktable_accountPostalCode.csv";

// Input data for scoring
DECLARE @TransactionsInputFile string =  @"/Samples/Data/transactions.csv";
DECLARE @AccountsInputFile string = @"/Samples/Data/accounts.csv";

// Output files
DECLARE @OutputFilePredictions string = @"/Samples/Output/FraudDetectionPredictionsAdvanced.txt";

DECLARE @PartitionCount int = 100;

@Transactions = EXTRACT accountID string, transactionID string, transactionAmountUSD double, transactionCurrencyCode string, localHour int,
              transactionScenario string, transactionType string, transactionIPaddress double, ipState string, ipPostalCode string,
                ipCountry string, isProxyIPNullable bool?, browserLanguage string, paymentInstrumentType string, cardType string,
 paymentBillingPostalCode string, paymentBillingState string, paymentBillingCountryCode string, shippingPostalCode string, shippingState string,
          shippingCountry string, cvvVerifyResult string, digitalItemCount int, physicalItemCount int, transactionDateTime string
                FROM @TransactionsInputFile
                USING Extractors.Csv(silent: true);

@Transactions = SELECT accountID, transactionID, transactionAmountUSD, transactionCurrencyCode, localHour,
              transactionScenario, transactionType, transactionIPaddress, ipState, ipPostalCode,
                ipCountry, (bool) (isProxyIPNullable ?? false) AS isProxyIP, browserLanguage, paymentInstrumentType, cardType,
 paymentBillingPostalCode, paymentBillingState, paymentBillingCountryCode, shippingPostalCode, shippingState,
          shippingCountry, cvvVerifyResult, digitalItemCount, physicalItemCount, transactionDateTime FROM @Transactions;

@Accounts = 
    EXTRACT accountID string, accountPostalCode string, accountState string, accountCountry string, accountAge string, 
            isUserRegistered string, paymentInstrumentAgeInAccount string
    FROM @AccountsInputFile
    USING Extractors.Csv(silent: true);

@Lookuptable_agg = 
    EXTRACT accountID string, sumPurchaseAmount1Day double, sumPurchaseCount1Day int, sumPurchaseAmount30Day double, sumPurchaseCount30Day int
    FROM @LookupTableInputFile
    USING Extractors.Csv(silent: true, skipFirstNRows: 1);     

// Join Transactions with Accounts
@Trans_Account = 
    SELECT @Transactions.*, accountPostalCode, accountState, accountCountry, accountAge, isUserRegistered, paymentInstrumentAgeInAccount  
    FROM @Transactions 
    LEFT JOIN @Accounts 
    ON @Transactions.accountID == @Accounts.accountID;

// Join lookup table of last 1day/30day aggregation features (account-level)
// In real scenario, this table should be updated regularly
// no null values for numbers are expected thus if information isn't available, fill with a default value
@Trans_Account_Agg = SELECT @Trans_Account.*, 
                      sumPurchaseAmount1Day ?? 0 AS sumPurchaseAmount1Day, 
                      sumPurchaseCount1Day ?? 0 AS sumPurchaseCount1Day, 
                      sumPurchaseAmount30Day ?? 0 AS sumPurchaseAmount30Day, 
                      sumPurchaseCount30Day ?? 0 AS sumPurchaseCount30Day
                    FROM @Trans_Account 
                    LEFT JOIN @Lookuptable_agg 
                    ON @Trans_Account.accountID == @Lookuptable_agg.accountID;

// Load risk tables 
@risktable_ipstate = EXTRACT ipState string, ipState_risk double
                    FROM @risktable_ipstateInputFile
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_ipPostalCode = EXTRACT ipPostalCode string, ipPostalCode_risk double
                    FROM @risktable_ipPostalCodeInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_ipCountry = EXTRACT ipCountry string, ipCountry_risk double
                    FROM @risktable_ipCountryInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_transactionIPaddress = EXTRACT transactionIPaddress double, transactionIPaddress_risk double
                    FROM @risktable_transactionIPaddressInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_paymentBillingPostalCode = EXTRACT paymentBillingPostalCode string, paymentBillingPostalCode_risk double
                    FROM @risktable_paymentBillingPostalCodeInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_shippingPostalCode = EXTRACT shippingPostalCode string, shippingPostalCode_risk double
                    FROM @risktable_shippingPostalCodeInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

@risktable_accountPostalCode = EXTRACT accountPostalCode string, accountPostalCode_risk double
                    FROM @risktable_accountPostalCodeInputFile   
                    USING Extractors.Csv(skipFirstNRows: 1);

// Join risk tables
@Trans_Account_Agg_Risk = SELECT @Trans_Account_Agg.*, 
                      ipState_risk ?? 0 AS ipState_risk,
                      ipPostalCode_risk ?? 0 AS ipPostalCode_risk,
                      ipCountry_risk ?? 0 AS ipCountry_risk,
                      transactionIPaddress_risk ?? 0 AS transactionIPaddress_risk,
                      paymentBillingPostalCode_risk ?? 0 AS paymentBillingPostalCode_risk,
                      shippingPostalCode_risk ?? 0 AS shippingPostalCode_risk,
                      accountPostalCode_risk ?? 0 AS accountPostalCode_risk
 FROM @Trans_Account_Agg LEFT JOIN @risktable_ipstate ON @Trans_Account_Agg.ipState == @risktable_ipstate.ipState
                         LEFT JOIN @risktable_ipPostalCode ON @Trans_Account_Agg.ipPostalCode == @risktable_ipPostalCode.ipPostalCode
                         LEFT JOIN @risktable_ipCountry ON @Trans_Account_Agg.ipCountry == @risktable_ipCountry.ipCountry
                         LEFT JOIN @risktable_transactionIPaddress ON @Trans_Account_Agg.transactionIPaddress == @risktable_transactionIPaddress.transactionIPaddress
                         LEFT JOIN @risktable_paymentBillingPostalCode ON @Trans_Account_Agg.paymentBillingPostalCode == @risktable_paymentBillingPostalCode.paymentBillingPostalCode
                         LEFT JOIN @risktable_shippingPostalCode ON @Trans_Account_Agg.shippingPostalCode == @risktable_shippingPostalCode.shippingPostalCode                                                           
                         LEFT JOIN @risktable_accountPostalCode ON @Trans_Account_Agg.accountPostalCode == @risktable_accountPostalCode.accountPostalCode;

// Add additional binary features
@Trans_Account_Agg_Risk_Binary = SELECT accountID, transactionID, transactionAmountUSD, transactionCurrencyCode, localHour, transactionScenario, transactionType, 
                                        isProxyIP, browserLanguage, paymentInstrumentType, cardType, 
                                        paymentBillingState, paymentBillingCountryCode, shippingState, 
                                        shippingCountry, cvvVerifyResult, digitalItemCount, physicalItemCount, transactionDateTime, 
                                        accountState, accountCountry, accountAge, isUserRegistered, paymentInstrumentAgeInAccount, sumPurchaseAmount1Day, 
                                        sumPurchaseCount1Day, sumPurchaseAmount30Day, sumPurchaseCount30Day, ipState_risk, ipPostalCode_risk, ipCountry_risk, 
                                        transactionIPaddress_risk, paymentBillingPostalCode_risk, shippingPostalCode_risk, accountPostalCode_risk,
                                        (transactionAmountUSD >150 ? true : false) AS is_highAmount,
                                        (paymentBillingPostalCode==accountPostalCode ? false : true) AS acct_billing_postalCode_mismatchFlag,
                                        (paymentBillingCountryCode==accountCountry ? false : true) AS acct_billing_country_mismatchFlag,
                                        (shippingPostalCode==accountPostalCode ? false : true) AS acct_shipping_postalCode_mismatchFlag,
                                        (shippingCountry==accountCountry ? false : true) AS acct_shipping_country_mismatchFlag,
                                        (shippingPostalCode==paymentBillingPostalCode ? false : true) AS shipping_billing_postalCode_mismatchFlag,
                                        (shippingCountry==paymentBillingCountryCode ? false : true) AS shipping_billing_country_mismatchFlag
                                        FROM @Trans_Account_Agg_Risk;


@ExtendedData =
    SELECT Extension.R.RandomNumberGenerator.GetRandomNumber(@PartitionCount) AS Par,
           *
    FROM @Trans_Account_Agg_Risk_Binary;

@RScriptOutput = 
    REDUCE @ExtendedData ON Par
    PRODUCE Par, accountID string, transactionDateTime string, transactionAmountUSD double, score double
    READONLY Par
    USING new Extension.R.Reducer(scriptFile:"FraudDetectionScoringAdvanced.R", rReturnType:"dataframe")
    OPTION (PARTITION(Par) = (PARTITIONCOUNT = 100));

OUTPUT @RScriptOutput TO @OutputFilePredictions USING Outputters.Tsv();

